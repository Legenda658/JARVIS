import sys
import speech_recognition as sr
import pyttsx3
import numpy as np
from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QMessageBox, QPushButton, QHBoxLayout, QProgressBar, QTextEdit, QInputDialog
from PyQt6.QtCore import Qt, QTimer, QThread, pyqtSignal
from PyQt6.QtGui import QPainter, QColor
import pyaudio
import pyautogui
import keyboard
import mouse
import os
import subprocess
from typing import Optional, List
from dataclasses import dataclass
from datetime import datetime
import traceback
import time
import json
CHUNK = 1024  
FORMAT = pyaudio.paFloat32  
CHANNELS = 1  
RATE = 44100  
@dataclass
class AudioConfig:
    CHUNK: int = 1024
    FORMAT: int = pyaudio.paFloat32
    CHANNELS: int = 1
    RATE: int = 44100
def log_command(command: str) -> None:
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
def get_available_microphones() -> List[tuple]:
    p = pyaudio.PyAudio()
    microphones = []
    try:
        for i in range(p.get_device_count()):
            try:
                device_info = p.get_device_info_by_index(i)
                if (device_info.get('maxInputChannels') > 0 and 
                    device_info.get('name') and 
                    'fifine' in device_info.get('name').lower()):
                    name = device_info.get('name', '').strip()
                    microphones.append((i, name))
                    print(f"–ù–∞–π–¥–µ–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω fifine: {name} (–∏–Ω–¥–µ–∫—Å: {i})")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {i}: {e}")
    finally:
        p.terminate()
    return microphones
class AudioVisualizer(QWidget):
    def __init__(self, parent: Optional[QWidget] = None):
        super().__init__(parent)
        self.setMinimumSize(300, 200)
        self.audio_data = np.zeros(100)
        self.config = AudioConfig()
        try:
            self.setup_audio()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            QMessageBox.critical(None, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ: {e}")
    def setup_audio(self) -> None:
        try:
            self.p = pyaudio.PyAudio()
            self.stream = self.p.open(
                format=self.config.FORMAT,
                channels=self.config.CHANNELS,
                rate=self.config.RATE,
                input=True,
                frames_per_buffer=self.config.CHUNK
            )
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞—É–¥–∏–æ: {e}")
    def update_audio(self) -> None:
        try:
            data = np.frombuffer(self.stream.read(self.config.CHUNK), dtype=np.float32)
            self.audio_data = np.roll(self.audio_data, -1)
            self.audio_data[-1] = np.abs(data).mean()
            self.update()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
    def paintEvent(self, event) -> None:
        try:
            painter = QPainter(self)
            painter.setRenderHint(QPainter.RenderHint.Antialiasing)
            width = self.width()
            height = self.height()
            painter.setPen(QColor(0, 255, 0))
            for i in range(len(self.audio_data) - 1):
                x1 = i * width / len(self.audio_data)
                y1 = height/2 + self.audio_data[i] * height/2
                x2 = (i + 1) * width / len(self.audio_data)
                y2 = height/2 + self.audio_data[i + 1] * height/2
                painter.drawLine(int(x1), int(y1), int(x2), int(y2))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏: {e}")
class VoiceListener(QThread):
    command_recognized = pyqtSignal(str)
    error_occurred = pyqtSignal(str)
    def __init__(self, device_index: int):
        super().__init__()
        self.recognizer = sr.Recognizer()
        self.device_index = device_index
        self.running = True
        self.recognizer.energy_threshold = 4000
        self.recognizer.dynamic_energy_threshold = True
        self.recognizer.pause_threshold = 0.8
        self.recognizer.phrase_threshold = 0.3
        self.recognizer.non_speaking_duration = 0.5
        self.recognizer.operation_timeout = 15
        self.is_listening = False
        self.microphone = None
    def run(self):
        try:
            with sr.Microphone(device_index=self.device_index) as source:
                print("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                self.recognizer.adjust_for_ambient_noise(source, duration=2)
                while self.running:
                    try:
                        audio = self.recognizer.listen(source, timeout=1, phrase_time_limit=5)
                        try:
                            text = self.recognizer.recognize_google(audio, language='ru-RU')
                            print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                            self.command_recognized.emit(text)
                            continue
                        except sr.UnknownValueError:
                            pass
                        try:
                            text = self.recognizer.recognize_google(audio, language='en-US')
                            print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (EN): {text}")
                            self.command_recognized.emit(text)
                        except sr.UnknownValueError:
                            pass
                    except sr.WaitTimeoutError:
                        continue
                    except sr.RequestError as e:
                        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
            self.error_occurred.emit(str(e))
    def stop(self):
        self.running = False
class JarvisWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–î–∂–∞—Ä–≤–∏—Å")
        self.setMinimumSize(500, 400)
        self.setWindowFlags(
            Qt.WindowType.Window |
            Qt.WindowType.WindowStaysOnTopHint
        )
        self.custom_commands = {}
        self.commands_file = 'custom_commands.json'
        self.load_custom_commands()
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        self.setStyleSheet("""
            QMainWindow {
                background-color: 
                color: 
            }
            QLabel {
                color: 
            }
            QTextEdit {
                background-color: 
                color: 
                border: 1px solid 
                border-radius: 5px;
                padding: 5px;
            }
            QPushButton {
                background-color: 
                color: white;
                border: none;
                padding: 5px 15px;
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: 
            }
            QPushButton:pressed {
                background-color: 
            }
            QProgressBar {
                border: 1px solid 
                border-radius: 3px;
                background-color: 
                color: white;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: 
            }
        """)
        self.info_label = QLabel("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        self.info_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.info_label)
        commands_label = QLabel("""
üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üîµ "–î–∂–∞—Ä–≤–∏—Å" ‚Äî –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–º–æ—â–Ω–∏–∫–∞
üìù "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç [—Ç–µ–∫—Å—Ç]" ‚Äî –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É
‚ùå "–ó–∞–∫—Ä–æ–π –æ–∫–Ω–æ" ‚Äî –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
üöÄ "–ó–∞–ø—É—Å—Ç–∏ [–ø—Ä–æ–≥—Ä–∞–º–º–∞]" ‚Äî –ó–∞–ø—É—Å–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
üìÇ "–û—Ç–∫—Ä–æ–π [–ø–∞–ø–∫–∞]" ‚Äî –û—Ç–∫—Ä—ã—Ç–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
üî¥ "–í—ã–∫–ª—é—á–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä" ‚Äî –í—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
üîÑ "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä" ‚Äî –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
‚è≥ "–û—Ç–º–µ–Ω–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ" ‚Äî –û—Ç–º–µ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
‚ûï "–î–æ–±–∞–≤—å –∫–æ–º–∞–Ω–¥—É" ‚Äî –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
üìú "–ü–æ–∫–∞–∂–∏ –∫–æ–º–∞–Ω–¥—ã" ‚Äî –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
""")
        commands_label.setStyleSheet("""
            background-color: 
            padding: 15px;
            border-radius: 5px;
            margin: 5px;
            color: 
            font-size: 12px;
        """)
        layout.addWidget(commands_label)
        self.volume_bar = QProgressBar()
        self.volume_bar.setMinimum(0)
        self.volume_bar.setMaximum(100)
        self.volume_bar.setTextVisible(True)
        self.volume_bar.setFormat("–£—Ä–æ–≤–µ–Ω—å: %p%")
        layout.addWidget(self.volume_bar)
        self.calibrate_button = QPushButton("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ (5 —Å–µ–∫)")
        self.calibrate_button.clicked.connect(self.start_calibration)
        layout.addWidget(self.calibrate_button)
        self.calibration_label = QLabel("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        self.calibration_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.calibration_label)
        self.text_output = QTextEdit()
        self.text_output.setReadOnly(True)
        self.text_output.setMinimumHeight(100)
        layout.addWidget(self.text_output)
        self.p = pyaudio.PyAudio()
        self.stream = None
        self.max_volume = 1.0
        self.is_calibrating = False
        self.calibration_start_time = 0
        self.calibration_values = []
        self.is_listening = False
        self.volume_timer = QTimer()
        self.volume_timer.timeout.connect(self.update_volume)
        self.initialize_microphone()
    def initialize_microphone(self):
        fifine_index = None
        for i in range(self.p.get_device_count()):
            dev_info = self.p.get_device_info_by_index(i)
            if 'fifine' in dev_info.get('name', '').lower():
                fifine_index = i
                try:
                    mic_name = "–ú–∏–∫—Ä–æ—Ñ–æ–Ω Fifine"
                    self.info_label.setText(mic_name)
                except Exception as e:
                    self.info_label.setText(f"–ú–∏–∫—Ä–æ—Ñ–æ–Ω Fifine (–∏–Ω–¥–µ–∫—Å: {i})")
                break
        if fifine_index is None:
            self.info_label.setText("–ú–∏–∫—Ä–æ—Ñ–æ–Ω fifine –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        try:
            self.stream = self.p.open(
                format=FORMAT,
                channels=CHANNELS,
                rate=RATE,
                input=True,
                input_device_index=fifine_index,
                frames_per_buffer=CHUNK
            )
            self.volume_timer.start(20)
            self.voice_listener = VoiceListener(fifine_index)
            self.voice_listener.command_recognized.connect(self.handle_command)
            self.voice_listener.error_occurred.connect(self.handle_error)
            self.voice_listener.start()
            print("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        except Exception as e:
            self.info_label.setText(f"–û—à–∏–±–∫–∞: {str(e)}")
    def handle_command(self, text):
        if not self.is_listening:
            if "–¥–∂–∞—Ä–≤–∏—Å" in text.lower():
                self.text_output.clear()  
                self.text_output.append("üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: " + text)
                self.text_output.append("‚úì –ê–∫—Ç–∏–≤–∞—Ü–∏—è: –î–∂–∞—Ä–≤–∏—Å")
                self.text_output.append("üëÇ –°–ª—É—à–∞—é...")
                self.is_listening = True
                print("–î–∂–∞—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.text_output.append("\nüé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: " + text)
            self.process_command(text)
            self.is_listening = False
            self.text_output.append("\n‚è≥ –û–∂–∏–¥–∞—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")
            print("–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
    def handle_error(self, error):
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {error}")
        self.text_output.append(f"\n–û—à–∏–±–∫–∞: {error}")
    def start_calibration(self):
        self.is_calibrating = True
        self.calibration_start_time = time.time()
        self.calibration_values = []
        self.calibrate_button.setEnabled(False)
        self.calibration_label.setText("–ò–¥–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞... –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω")
    def update_volume(self):
        if not self.stream:
            return
        try:
            data = np.frombuffer(self.stream.read(CHUNK, exception_on_overflow=False), dtype=np.float32)
            volume = np.abs(data).mean()
            if self.is_calibrating:
                self.calibration_values.append(volume)
                elapsed = time.time() - self.calibration_start_time
                if elapsed >= 5:
                    self.is_calibrating = False
                    self.max_volume = max(self.calibration_values)
                    self.calibrate_button.setEnabled(True)
                    status_msg = f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–∞–∫—Å. —É—Ä–æ–≤–µ–Ω—å: {self.max_volume:.4f}"
                    print(f"\n{status_msg}")
                    self.calibration_label.setText(status_msg)
            normalized_volume = min(100, int((volume / self.max_volume) * 100))
            self.volume_bar.setValue(normalized_volume)
        except Exception as e:
            if "Input overflowed" not in str(e):
                error_msg = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}"
                print(error_msg)
                self.info_label.setText(error_msg)
    def load_custom_commands(self):
        try:
            if os.path.exists(self.commands_file):
                with open(self.commands_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.custom_commands = {k: v for k, v in data.items() if not k.startswith('//')}
                print("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
                for command, action in self.custom_commands.items():
                    print(f"‚Ä¢ {command} -> {action}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥: {e}")
            self.create_commands_template()
    def create_commands_template(self):
        template = {
            "// –≠—Ç–æ —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –î–∂–∞—Ä–≤–∏—Å": "",
            "// –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥:": "",
            "// '–∫–æ–º–∞–Ω–¥–∞': '–¥–µ–π—Å—Ç–≤–∏–µ'": "",
            "// –ü—Ä–∏–º–µ—Ä—ã:": "",
            "// –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∞–π—Ç–∞:": "",
            "–æ—Ç–∫—Ä–æ–π youtube": "https://youtube.com",
            "// –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:": "",
            "–æ—Ç–∫—Ä–æ–π –±–ª–æ–∫–Ω–æ—Ç": "notepad.exe",
            "// –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏:": "",
            "–æ—Ç–∫—Ä–æ–π –¥–æ–∫—É–º–µ–Ω—Ç—ã": "C:\\Users\\Public\\Documents",
            "// –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:": ""
        }
        try:
            with open(self.commands_file, 'w', encoding='utf-8') as f:
                json.dump(template, f, ensure_ascii=False, indent=4)
            print("–°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞ –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∫–æ–º–∞–Ω–¥: {e}")
    def save_custom_commands(self):
        try:
            current_data = {}
            if os.path.exists(self.commands_file):
                with open(self.commands_file, 'r', encoding='utf-8') as f:
                    current_data = json.load(f)
            for command, action in self.custom_commands.items():
                current_data[command] = action
            with open(self.commands_file, 'w', encoding='utf-8') as f:
                json.dump(current_data, f, ensure_ascii=False, indent=4)
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥: {e}")
    def add_custom_command(self, command_name):
        try:
            action, ok = QInputDialog.getText(
                self,
                "–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞",
                f"–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command_name}':\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ https://youtube.com - –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∞–π—Ç–∞\n"
                "‚Ä¢ notepad.exe - –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
                "‚Ä¢ C:\\–ü—É—Ç—å\\–ö\\–ü–∞–ø–∫–µ - –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏"
            )
            if ok and action:
                self.custom_commands[command_name] = action
                self.save_custom_commands()
                self.text_output.append(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: '{command_name}' -> {action}")
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command_name} -> {action}")
        except Exception as e:
            error = f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}"
            self.text_output.append(f"‚ùå {error}")
            print(error)
    def show_custom_commands(self):
        if not self.custom_commands:
            self.text_output.append("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        self.text_output.append("\nüìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        for command, action in self.custom_commands.items():
            self.text_output.append(f"‚Ä¢ {command} -> {action}")
    def process_command(self, command):
        try:
            command = command.lower()
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command}")
            add_command_variants = [
                "–¥–æ–±–∞–≤—å –∫–æ–º–∞–Ω–¥—É", "–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", "—Å–æ–∑–¥–∞–π –∫–æ–º–∞–Ω–¥—É",
                "—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", "–Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞", "—Å–¥–µ–ª–∞–π –∫–æ–º–∞–Ω–¥—É"
            ]
            if any(x in command for x in add_command_variants):
                command_name = command
                for variant in add_command_variants:
                    command_name = command_name.replace(variant, "").strip()
                if command_name:
                    self.add_custom_command(command_name)
                else:
                    self.text_output.append("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã")
                    print("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–æ–º–∞–Ω–¥—ã")
            elif any(x in command for x in [
                "–ø–æ–∫–∞–∂–∏ –∫–æ–º–∞–Ω–¥—ã", "–ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", "—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                "–∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã", "–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", "—á—Ç–æ —É–º–µ–µ—à—å"
            ]):
                self.show_custom_commands()
            elif command in self.custom_commands:
                action = self.custom_commands[command]
                try:
                    if action.startswith(('http://', 'https://')):
                        os.startfile(action)
                        self.text_output.append(f"‚úì –û—Ç–∫—Ä—ã–≤–∞—é: {action}")
                    else:
                        subprocess.Popen(action, shell=True)
                        self.text_output.append(f"‚úì –í—ã–ø–æ–ª–Ω—è—é: {action}")
                except Exception as e:
                    error = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}"
                    self.text_output.append(f"‚ùå {error}")
                    print(error)
            elif any(x in command for x in [
                "–≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç", "–Ω–∞–ø–∏—à–∏", "–Ω–∞–±–µ—Ä–∏", "–Ω–∞–ø–µ—á–∞—Ç–∞–π",
                "–≤–≤–µ–¥–∏", "–Ω–∞–ø–∏—Å–∞—Ç—å", "–ø–µ—á–∞—Ç–∞–π"
            ]):
                text_to_type = command
                for variant in ["–≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç", "–Ω–∞–ø–∏—à–∏", "–Ω–∞–±–µ—Ä–∏", 
                              "–Ω–∞–ø–µ—á–∞—Ç–∞–π", "–≤–≤–µ–¥–∏", "–Ω–∞–ø–∏—Å–∞—Ç—å", "–ø–µ—á–∞—Ç–∞–π"]:
                    text_to_type = text_to_type.replace(variant, "").strip()
                if text_to_type:
                    self.text_output.append(f"‚úì –í–≤–æ–∂—É —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã: '{text_to_type}'")
                    QTimer.singleShot(2000, lambda: self.type_text(text_to_type))
            elif any(x in command for x in [
                "–∑–∞–∫—Ä–æ–π –æ–∫–Ω–æ", "–∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ", "–∑–∞–∫—Ä–æ–π –≤–∫–ª–∞–¥–∫—É",
                "–∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É", "–∑–∞–∫—Ä–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—É", "–≤—ã—Ö–æ–¥"
            ]):
                keyboard.send("alt+f4")
                self.text_output.append("‚úì –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞")
                print("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞")
            elif any(x in command for x in [
                "–∑–∞–ø—É—Å—Ç–∏", "–∑–∞–ø—É—Å—Ç–∏—Ç—å", "–æ—Ç–∫—Ä–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—É",
                "–≤–∫–ª—é—á–∏", "—Å—Ç–∞—Ä—Ç", "–∑–∞–≥—Ä—É–∑–∏"
            ]):
                app_name = command
                for variant in ["–∑–∞–ø—É—Å—Ç–∏", "–∑–∞–ø—É—Å—Ç–∏—Ç—å", "–æ—Ç–∫—Ä–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—É",
                              "–≤–∫–ª—é—á–∏", "—Å—Ç–∞—Ä—Ç", "–∑–∞–≥—Ä—É–∑–∏"]:
                    app_name = app_name.replace(variant, "").strip()
                try:
                    if os.path.exists(app_name):
                        subprocess.Popen(app_name)
                        self.text_output.append(f"‚úì –ó–∞–ø—É—â–µ–Ω–æ: '{app_name}'")
                    else:
                        subprocess.Popen(f"start {app_name}", shell=True)
                        self.text_output.append(f"‚úì –ó–∞–ø—É—â–µ–Ω–æ: '{app_name}'")
                    print(f"–ó–∞–ø—É—â–µ–Ω–æ: {app_name}")
                except Exception as e:
                    error = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}"
                    self.text_output.append(f"‚ùå {error}")
                    print(error)
            elif any(x in command for x in [
                "–æ—Ç–∫—Ä–æ–π", "–æ—Ç–∫—Ä—ã—Ç—å", "–ø–æ–∫–∞–∂–∏ –ø–∞–ø–∫—É",
                "–æ—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É", "–ø–µ—Ä–µ–π—Ç–∏ –≤"
            ]):
                folder_name = command
                for variant in ["–æ—Ç–∫—Ä–æ–π", "–æ—Ç–∫—Ä—ã—Ç—å", "–ø–æ–∫–∞–∂–∏ –ø–∞–ø–∫—É",
                              "–æ—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É", "–ø–µ—Ä–µ–π—Ç–∏ –≤"]:
                    folder_name = folder_name.replace(variant, "").strip()
                try:
                    if os.path.exists(folder_name):
                        os.startfile(folder_name)
                        self.text_output.append(f"‚úì –û—Ç–∫—Ä—ã—Ç–æ: '{folder_name}'")
                        print(f"–û—Ç–∫—Ä—ã—Ç–æ: {folder_name}")
                    else:
                        error = f"–ü–∞–ø–∫–∞ '{folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        self.text_output.append(f"‚ùå {error}")
                        print(error)
                except Exception as e:
                    error = f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {e}"
                    self.text_output.append(f"‚ùå {error}")
                    print(error)
            elif any(x in command for x in [
                "–≤—ã–∫–ª—é—á–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä", "–≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä",
                "–≤—ã–∫–ª—é—á–∏ —Å–∏—Å—Ç–µ–º—É", "–≤—ã–∫–ª—é—á–µ–Ω–∏–µ", "shutdown",
                "–≤—ã–∫–ª—é—á–∏ –ø–∫", "–≤—ã—Ä—É–±–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä"
            ]):
                os.system("shutdown /s /t 60")
                msg = "–í—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥"
                self.text_output.append(f"‚úì {msg}")
                print(msg)
            elif any(x in command for x in [
                "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä", "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä",
                "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ —Å–∏—Å—Ç–µ–º—É", "—Ä–µ—Å—Ç–∞—Ä—Ç", "restart",
                "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –ø–∫", "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä"
            ]):
                os.system("shutdown /r /t 60")
                msg = "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥"
                self.text_output.append(f"‚úì {msg}")
                print(msg)
            elif any(x in command for x in [
                "–æ—Ç–º–µ–Ω–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ", "–æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ",
                "–æ—Ç–º–µ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è", "–æ—Ç–º–µ–Ω–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É",
                "—Å—Ç–æ–ø –≤—ã–∫–ª—é—á–µ–Ω–∏–µ", "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ"
            ]):
                os.system("shutdown /a")
                msg = "–í—ã–∫–ª—é—á–µ–Ω–∏–µ/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã"
                self.text_output.append(f"‚úì {msg}")
                print(msg)
            elif any(x in command for x in [
                "–Ω–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                "–ø–æ–∏—â–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                "–Ω–∞–π–¥–∏ –≤ –≥—É–≥–ª–µ", "–ø–æ–∏—â–∏ –≤ –≥—É–≥–ª–µ",
                "–Ω–∞–π–¥–∏ –≤ google", "–ø–æ–∏—â–∏ –≤ google"
            ]):
                search_query = command
                for variant in ["–Ω–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                              "–ø–æ–∏—â–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                              "–Ω–∞–π–¥–∏ –≤ –≥—É–≥–ª–µ", "–ø–æ–∏—â–∏ –≤ –≥—É–≥–ª–µ",
                              "–Ω–∞–π–¥–∏ –≤ google", "–ø–æ–∏—â–∏ –≤ google"]:
                    search_query = search_query.replace(variant, "").strip()
                if search_query:
                    search_url = f"https://www.google.com/search?q={search_query}"
                    os.startfile(search_url)
                    self.text_output.append(f"‚úì –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–∏—Å–∫: '{search_query}'")
                    print(f"–û—Ç–∫—Ä—ã—Ç –ø–æ–∏—Å–∫: {search_query}")
                else:
                    self.text_output.append("‚ùå –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏")
                    print("–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            else:
                self.text_output.append("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        except Exception as e:
            error = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}"
            self.text_output.append(f"‚ùå {error}")
            print(error)
        self.text_output.verticalScrollBar().setValue(
            self.text_output.verticalScrollBar().maximum()
        )
    def type_text(self, text):
        try:
            keyboard.write(text)
            print(f"–í–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç: {text}")
        except Exception as e:
            error = f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {e}"
            self.text_output.append(f"‚ùå {error}")
            print(error)
    def closeEvent(self, event):
        if hasattr(self, 'voice_listener'):
            self.voice_listener.stop()
            self.voice_listener.wait()
        if self.stream:
            self.stream.stop_stream()
            self.stream.close()
        self.p.terminate()
        event.accept()
def main() -> None:
    try:
        app = QApplication(sys.argv)
        window = JarvisWindow()
        window.show()
        sys.exit(app.exec())
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")
if __name__ == '__main__':
    main() 